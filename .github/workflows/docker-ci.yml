name: Docker CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests in Docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.test
        push: false
        tags: borclu-sorgulama:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run tests in container
      run: |
        docker run --rm \
          -e DOCKER_ENV=true \
          -e NODE_ENV=test \
          -e DATABASE_URL=file:/app/prisma/test/test.db \
          -e GEMINI_API_KEY=test_key \
          -e NEXTAUTH_SECRET=test_secret \
          -e NEXTAUTH_URL=http://localhost:3000 \
          borclu-sorgulama:test

    - name: Run test coverage
      run: |
        docker run --rm \
          -e DOCKER_ENV=true \
          -e NODE_ENV=test \
          -e DATABASE_URL=file:/app/prisma/test/test.db \
          -e GEMINI_API_KEY=test_key \
          -e NEXTAUTH_SECRET=test_secret \
          -e NEXTAUTH_URL=http://localhost:3000 \
          -v ${{ github.workspace }}/coverage:/app/coverage \
          borclu-sorgulama:test npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: borclu-sorgulama:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'borclu-sorgulama:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment artifact
      run: |
        mkdir -p deployment
        echo "IMAGE_TAG=${{ steps.meta.outputs.tags }}" > deployment/image-tag.env
        cp docker-compose.prod.yml deployment/
        cp -r scripts deployment/

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-files
        path: deployment/

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download deployment artifact
      uses: actions/download-artifact@v3
      with:
        name: deployment-files
        path: deployment/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run integration tests
      run: |
        # Load image tag
        source deployment/image-tag.env
        
        # Start services with built image
        docker-compose -f deployment/docker-compose.prod.yml up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Run health check
        curl -f http://localhost:3000/api/health || exit 1
        
        # Run integration tests
        docker-compose -f docker-compose.test.yml run --rm test npm run test:integration || true
        
        # Cleanup
        docker-compose -f deployment/docker-compose.prod.yml down -v